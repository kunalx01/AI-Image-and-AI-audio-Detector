import os
from typing import Dict, Union
from classifier_model import detect_image as detect_classifier
from image_test_vgg16 import analyze_image, analyze_folder as vgg_analyze_folder

def analyze_single_image(image_path: str, 
                         classifier_model_path: str = "image_classifier.pkl",
                         vgg_model_path: str = "Image_part.h5") -> Dict[str, Union[tuple, dict]]:
    """
    Analyze an image using both classifier and VGG16 models.
    
    Args:
        image_path (str): Path to the image file
        classifier_model_path (str): Path to the classifier model file
        vgg_model_path (str): Path to the VGG16 model file
    
    Returns:
        Dict formatted to display the results of both models as requested.
    """
    try:
        # Check if the image exists
        if not os.path.exists(image_path):
            raise FileNotFoundError(f"Image not found at path: {image_path}")
            
        # Run classifier detection and format output
        classifier_result = detect_classifier(image_path, classifier_model_path)
        classifier_label = "AI Generated True" if classifier_result[0] == "AI-generated" else "AI Generated False"
        formatted_classifier_result = {
            "Classifier Model Results": {
                "Prediction": classifier_label,
                "Confidence": f"{classifier_result[1]:.2f}"
            }
        }
        
        # Run VGG analysis and format output
        vgg_result = analyze_image(vgg_model_path, image_path)
        if vgg_result['success']:
            vgg_label = "AI Generated True" if vgg_result['label'] == "AI-generated" else "AI Generated False"
            formatted_vgg_result = {
                "VGG16 Model Results": {
                    "Prediction": vgg_label,
                    "Confidence": f"{vgg_result['confidence']:.2f}%",
                    "Raw prediction value": f"{vgg_result['prediction_value']:.4f}"
                }
            }
        else:
            formatted_vgg_result = {
                "VGG16 Model Results": {
                    "Error": vgg_result.get('error', 'Unknown error')
                }
            }
        
        # Combine formatted results
        results = {**formatted_classifier_result, **formatted_vgg_result}
        
        return results
        
    except Exception as e:
        return {"Error": str(e)}

def is_ai_generated(image_path: str, 
                    classifier_model_path: str = "image_classifier.pkl",
                    vgg_model_path: str = "Image_part.h5") -> bool:
    """
    Determine if an image is classified as AI-generated by both models.
    
    Args:
        image_path (str): Path to the image file
        classifier_model_path (str): Path to the classifier model file
        vgg_model_path (str): Path to the VGG16 model file
    
    Returns:
        bool: True if both models classify the image as AI-generated, False otherwise.
    """
    results = analyze_single_image(image_path, classifier_model_path, vgg_model_path)
    
    classifier_prediction = results.get("Classifier Model Results", {}).get("Prediction", "")
    vgg_prediction = results.get("VGG16 Model Results", {}).get("Prediction", "")
    
    # Check if both predictions indicate "AI Generated True"
    return classifier_prediction == "AI Generated True" and vgg_prediction == "AI Generated True"

def get_ai_generated_boolean_string_image(image_path: str) -> str:
    """
    Returns a formatted string indicating if the image is AI-generated.
    
    Args:
        image_path (str): Path to the image file
    
    Returns:
        str: "True" if the image is AI-generated by both models, "False" otherwise.
    """
    is_generated = is_ai_generated(image_path)
    return "True" if is_generated else "False"

# Example usage for a single image
if __name__ == "__main__":
    image_path = 'data\\test_image.png'  # Replace with your image path
    boolean_result = get_ai_generated_boolean_string_image(image_path)
    print(f"AI Generated (True/False): {boolean_result}")  # Output the boolean result
